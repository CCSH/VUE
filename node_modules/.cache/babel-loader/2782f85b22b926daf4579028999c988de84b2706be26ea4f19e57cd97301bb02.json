{"ast":null,"code":"import _Message2 from \"element-ui/lib/message\";\nimport _Message from \"element-ui/lib/message\";\n// 导入axios\nimport axios from 'axios';\n// 使用element-ui Message做消息提醒\n\n//1. 创建新的axios实例，\nconst service = axios.create({\n  // 超时时间 单位是ms，这里设置了3s的超时时间\n  timeout: 3 * 1000\n});\n\n// 2.请求拦截器\nservice.interceptors.request.use(config => {\n  //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\n  config.data = JSON.stringify(config.data); //数据转化,也可以使用qs转换\n  //配置请求头\n  config.headers = {\n    'Content-Type': 'application/json'\n  };\n  //如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n  // const token = getCookie('名称') //这里取token之前，你肯定需要先拿到token,存一下\n  // if (token) {\n  //   config.params = { token: token } //如果要求携带在参数中\n  //   config.headers.token = token //如果要求携带在请求头中\n  // }\n  return config;\n}, error => {\n  Promise.reject(error);\n});\n\n// 3.响应拦截器\nservice.interceptors.response.use(response => {\n  //接收到响应数据并成功后的一些共有的处理，关闭loading等\n  return response;\n}, error => {\n  /***** 接收到异常响应的处理开始 *****/\n  if (error && error.response) {\n    // 1.公共错误处理\n    // 2.根据响应码具体处理\n    switch (error.response.status) {\n      case 400:\n        error.message = '错误请求';\n        break;\n      case 401:\n        error.message = '未授权，请重新登录';\n        break;\n      case 403:\n        error.message = '拒绝访问';\n        break;\n      case 404:\n        error.message = '请求错误,未找到该资源';\n        window.location.href = '/NotFound';\n        break;\n      case 405:\n        error.message = '请求方法未允许';\n        break;\n      case 408:\n        error.message = '请求超时';\n        break;\n      case 500:\n        error.message = '服务器端出错';\n        break;\n      case 501:\n        error.message = '网络未实现';\n        break;\n      case 502:\n        error.message = '网络错误';\n        break;\n      case 503:\n        error.message = '服务不可用';\n        break;\n      case 504:\n        error.message = '网络超时';\n        break;\n      case 505:\n        error.message = 'http版本不支持该请求';\n        break;\n      default:\n        error.message = `连接错误${error.response.status}`;\n    }\n  } else {\n    // 超时处理\n    if (JSON.stringify(error).includes('timeout')) {\n      _Message.error('服务器响应超时，请刷新当前页');\n    }\n    error.message = '连接服务器失败';\n  }\n  _Message.error(error.message);\n  /***** 处理结束 *****/\n  //如果不需要错误处理，以上的处理过程都可省略\n  return Promise.resolve(error.response);\n});\n//4.导入文件\nexport default service;","map":{"version":3,"names":["axios","service","create","timeout","interceptors","request","use","config","data","JSON","stringify","headers","error","Promise","reject","response","status","message","window","location","href","includes","_Message","resolve"],"sources":["/Users/csh/Desktop/项目/VUE/src/utils/request.js"],"sourcesContent":["// 导入axios\nimport axios from 'axios'\n// 使用element-ui Message做消息提醒\nimport { Message } from 'element-ui'\n\n//1. 创建新的axios实例，\nconst service = axios.create({\n  // 超时时间 单位是ms，这里设置了3s的超时时间\n  timeout: 3 * 1000,\n})\n\n// 2.请求拦截器\nservice.interceptors.request.use(\n  (config) => {\n    //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\n    config.data = JSON.stringify(config.data) //数据转化,也可以使用qs转换\n    //配置请求头\n    config.headers = {\n      'Content-Type': 'application/json',\n    }\n    //如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n    // const token = getCookie('名称') //这里取token之前，你肯定需要先拿到token,存一下\n    // if (token) {\n    //   config.params = { token: token } //如果要求携带在参数中\n    //   config.headers.token = token //如果要求携带在请求头中\n    // }\n    return config\n  },\n  (error) => {\n    Promise.reject(error)\n  },\n)\n\n// 3.响应拦截器\nservice.interceptors.response.use(\n  (response) => {\n    //接收到响应数据并成功后的一些共有的处理，关闭loading等\n    return response\n  },\n  (error) => {\n    /***** 接收到异常响应的处理开始 *****/\n    if (error && error.response) {\n      // 1.公共错误处理\n      // 2.根据响应码具体处理\n      switch (error.response.status) {\n        case 400:\n          error.message = '错误请求'\n          break\n        case 401:\n          error.message = '未授权，请重新登录'\n          break\n        case 403:\n          error.message = '拒绝访问'\n          break\n        case 404:\n          error.message = '请求错误,未找到该资源'\n          window.location.href = '/NotFound'\n          break\n        case 405:\n          error.message = '请求方法未允许'\n          break\n        case 408:\n          error.message = '请求超时'\n          break\n        case 500:\n          error.message = '服务器端出错'\n          break\n        case 501:\n          error.message = '网络未实现'\n          break\n        case 502:\n          error.message = '网络错误'\n          break\n        case 503:\n          error.message = '服务不可用'\n          break\n        case 504:\n          error.message = '网络超时'\n          break\n        case 505:\n          error.message = 'http版本不支持该请求'\n          break\n        default:\n          error.message = `连接错误${error.response.status}`\n      }\n    } else {\n      // 超时处理\n      if (JSON.stringify(error).includes('timeout')) {\n        Message.error('服务器响应超时，请刷新当前页')\n      }\n      error.message = '连接服务器失败'\n    }\n    \n    Message.error(error.message)\n    /***** 处理结束 *****/\n    //如果不需要错误处理，以上的处理过程都可省略\n    return Promise.resolve(error.response)\n  },\n)\n//4.导入文件\nexport default service\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAGA;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3B;EACAC,OAAO,EAAE,CAAC,GAAG;AACf,CAAC,CAAC;;AAEF;AACAF,OAAO,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAK;EACV;EACAA,MAAM,CAACC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAACC,IAAI,CAAC,EAAC;EAC1C;EACAD,MAAM,CAACI,OAAO,GAAG;IACf,cAAc,EAAE;EAClB,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA,OAAOJ,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACTC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACvB,CAAC,CACF;;AAED;AACAX,OAAO,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9BS,QAAQ,IAAK;EACZ;EACA,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAC3B;IACA;IACA,QAAQH,KAAK,CAACG,QAAQ,CAACC,MAAM;MAC3B,KAAK,GAAG;QACNJ,KAAK,CAACK,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,WAAW;QAC3B;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,aAAa;QAC7BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,WAAW;QAClC;MACF,KAAK,GAAG;QACNR,KAAK,CAACK,OAAO,GAAG,SAAS;QACzB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,QAAQ;QACxB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,OAAO;QACvB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,OAAO;QACvB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,OAAO,GAAG,cAAc;QAC9B;MACF;QACEL,KAAK,CAACK,OAAO,GAAI,OAAML,KAAK,CAACG,QAAQ,CAACC,MAAO,EAAC;IAAA;EAEpD,CAAC,MAAM;IACL;IACA,IAAIP,IAAI,CAACC,SAAS,CAACE,KAAK,CAAC,CAACS,QAAQ,CAAC,SAAS,CAAC,EAAE;MAC7CC,QAAA,CAAQV,KAAK,CAAC,gBAAgB,CAAC;IACjC;IACAA,KAAK,CAACK,OAAO,GAAG,SAAS;EAC3B;EAEAK,QAAA,CAAQV,KAAK,CAACA,KAAK,CAACK,OAAO,CAAC;EAC5B;EACA;EACA,OAAOJ,OAAO,CAACU,OAAO,CAACX,KAAK,CAACG,QAAQ,CAAC;AACxC,CAAC,CACF;AACD;AACA,eAAed,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}