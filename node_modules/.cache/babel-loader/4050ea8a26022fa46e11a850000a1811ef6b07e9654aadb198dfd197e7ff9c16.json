{"ast":null,"code":"export default {\n  name: 'z-el-table',\n  directives: {\n    // 自定义指令,用于可编辑input自动获取焦点\n    focus: {\n      inserted: function (e) {\n        e.querySelector('input').focus();\n      }\n    }\n  },\n  props: {\n    tableData: {\n      type: Array,\n      required: true\n    },\n    // tableObj是table所有配置，集成了element自身所有配置，以及新增了一些个性化配置\n    tableObj: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    // columnObj列配置选项，继承了element自身的所有配置，将选择框操作提出来在columnObj属性上，其他依然保留各自列\n    //columnObj.type(如果为\"\"空，就不会加载多选框，或者index编号),lazy(是否支持懒加载)\n    //columnData.columType(列类型,可选text(默认为普通文字模式),input(input可编辑框),switch(switch开关),image(图片),operation(操作按钮))\n    //prop(参数),label(列名),width(宽度),align(对齐方式),sortable(是否支持排序)\n    //如果为操作列,则需要填写需要的操作按钮,类型为Object。type(按钮样式,参考el—botton类型),label(按钮文字)icon(参考el-icon),color(字体颜色),buttonClick为点击后调用的方法名称\n    columnObj: {\n      type: Object,\n      required: true\n    },\n    pageObj: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      headerCellStyle: {\n        background: '#f5f7fa'\n      },\n      layout: 'total, sizes, prev, pager, next, jumper'\n    };\n  },\n  methods: {\n    // 设置默认行样式\n    rowClassName(_ref) {\n      let {\n        row,\n        rowIndex\n      } = _ref;\n      row.rowIndex = rowIndex;\n      // if ((rowIndex + 3) % 3 == 0) {\n      //   return 'success-row'\n      // } else if ((rowIndex + 3) % 3 == 1) {\n      //   return 'warning-primary'\n      // } else if ((rowIndex + 3) % 3 == 2) {\n      //   return 'warning-row'\n      // }\n    },\n\n    // switchChange调用\n    switchChange(row, $index, prop) {\n      this.$emit('switchChange', row, $index, prop);\n    },\n    // 点击行\n    rowClick(row, column, event) {\n      this.$emit('rowClick', row, column, event);\n    },\n    // 可编辑input失去焦点\n    editInputBlur(row, $index, prop, columIndex) {\n      this.$emit('editInputBlur', row, $index, prop, columIndex);\n    },\n    // 条数变化,params每页条数\n    sizeChange(e) {\n      this.$emit('sizeChange', e);\n    },\n    // 页码变化,params当前页\n    currentChange(e) {\n      this.$emit('currentChange', e);\n    },\n    // 用户点击上一页按钮改变当前页后触发,params当前页\n    prevClick(e) {\n      this.$emit('prevClick', e);\n    },\n    // 用户点击下一页按钮改变当前页后触发\t,params当前页\n    nextClick(e) {\n      this.$emit('nextClick', e);\n    }\n  }\n};","map":{"version":3,"names":["name","directives","focus","inserted","e","querySelector","props","tableData","type","Array","required","tableObj","Object","default","columnObj","pageObj","data","headerCellStyle","background","layout","methods","rowClassName","_ref","row","rowIndex","switchChange","$index","prop","$emit","rowClick","column","event","editInputBlur","columIndex","sizeChange","currentChange","prevClick","nextClick"],"sources":["src/components/CommonTable.vue"],"sourcesContent":["<template>\n  <div class=\"z-table-div\">\n    <!-- 表格 -->\n    <el-table\n      :data=\"tableData\"\n      :height=\"tableObj.height\"\n      :max-height=\"tableObj.maxHeight\"\n      :stripe=\"tableObj.stripe\"\n      :border=\"tableObj.border\"\n      :size=\"tableObj.size\"\n      :fit=\"tableObj.fit\"\n      :show-header=\"tableObj.showHeader\"\n      :highlight-current-row=\"tableObj.highlightCurrentRow\"\n      :current-row-key=\"tableObj.currentRowKey\"\n      :row-class-name=\"tableObj.rowClassName || rowClassName\"\n      :row-style=\"tableObj.rowStyle\"\n      :cell-class-name=\"tableObj.cellClassName\"\n      :cell-style=\"tableObj.cellStyle\"\n      :header-row-class-name=\"tableObj.headerRowClassName\"\n      :header-row-style=\"tableObj.headerRowStyle\"\n      :header-cell-class-name=\"tableObj.headerCellClassName\"\n      :header-cell-style=\"tableObj.headerCellStyle || headerCellStyle\"\n      :row-key=\"tableObj.rowKey\"\n      :empty-text=\"tableObj.emptyText\"\n      :default-expand-all=\"tableObj.defaultExpandAll\"\n      :expand-row-keys=\"tableObj.expandRowKeys\"\n      :default-sort=\"tableObj.defaultSort\"\n      :tooltip-effect=\"tableObj.tooltipEffect\"\n      :show-summary=\"tableObj.showSummary\"\n      :sum-text=\"tableObj.sumText\"\n      :summary-method=\"tableObj.summaryMethod\"\n      :span-method=\"tableObj.spanMethod\"\n      :select-on-indeterminate=\"tableObj.selectOnIndeterminate\"\n      :indent=\"tableObj.indent\"\n      :lazy=\"tableObj.lazy\"\n      :load=\"tableObj.load\"\n      :tree-props=\"tableObj.treeProps\"\n      v-loading=\"tableObj.loading\"\n      @row-click=\"rowClick\"\n    >\n      <!-- 选择框是否开启，selectable控制是否单行禁止选中 -->\n      <el-table-column\n        v-if=\"columnObj.selection\"\n        type=\"selection\"\n        :selectable=\"columnObj.selectable\"\n        width=\"50px\"\n      />\n      <!-- 序号 -->\n      <el-table-column v-if=\"columnObj.index\" type=\"index\"> </el-table-column>\n      <!-- 普通列 -->\n      <el-table-column\n        v-for=\"(column, columIndex) in columnObj.columnData\"\n        :key=\"columIndex\"\n        :index=\"columIndex\"\n        :column-key=\"column.columnKey\"\n        :label=\"column.label\"\n        :prop=\"column.prop\"\n        :width=\"column.width\"\n        :min-width=\"column.minWidth\"\n        :fixed=\"column.fixed\"\n        :render-header=\"column.renderHeader\"\n        :sortable=\"column.sortable\"\n        :sort-method=\"column.sortMethod\"\n        :sort-by=\"column.sortBy\"\n        :sort-orders=\"column.sortOrders\"\n        :resizable=\"column.resizable\"\n        :formatter=\"column.formatter\"\n        :show-overflow-tooltip=\"column.showOverflowTooltip || true\"\n        :align=\"column.align || 'center'\"\n        :header-align=\"column.headerAlign\"\n        :class-name=\"column.className\"\n        :label-class-name=\"column.labelClassName\"\n        :reserve-selection=\"column.reserveSelection\"\n        :filters=\"column.filters\"\n        :filter-placement=\"column.filterPlacement\"\n        :filter-multiple=\"column.filterMultiple\"\n        :filter-method=\"column.filterMethod\"\n        :filtered-value=\"column.filteredValue\"\n      >\n        <template slot-scope=\"{ row, $index }\">\n          <!-- 默认展示 -->\n          <span v-if=\"column.text && column.editRow != $index\">{{\n            row[column.prop]\n          }}</span>\n          <!-- 自定义内容 -->\n          <template v-if=\"column.ownDefined\">\n            <slot\n              :name=\"column.prop || 'default'\"\n              :index=\"$index\"\n              :row=\"row\"\n              :column=\"column\"\n            >\n              <span>\n                {{ column.ownDefinedReturn(row, $index) }}\n              </span>\n            </slot>\n          </template>\n          <!-- 状态对象展示 -->\n          <span v-if=\"column.status && row[column.prop]\">{{\n            row[column.prop].msg\n          }}</span>\n          <!-- switch开关 -->\n          <el-switch\n            v-if=\"column.switch\"\n            v-model=\"row[column.prop]\"\n            :inactive-text=\"\n              row[column.prop] ? column.openText : column.closeText\n            \"\n            @change=\"switchChange(row, $index, column.prop)\"\n          />\n          <!-- 图片展示 -->\n          <el-popover trigger=\"hover\" placement=\"top\" popper-class=\"popper\">\n            <img v-if=\"column.image\" :src=\"row[column.prop]\" />\n            <el-image\n              slot=\"reference\"\n              v-if=\"column.image\"\n              :src=\"row[column.prop]\"\n            />\n          </el-popover>\n          <!-- 图片数组 -->\n          <el-popover\n            v-if=\"column.imageArr\"\n            trigger=\"hover\"\n            placement=\"top\"\n            popper-class=\"popper\"\n          >\n            <img\n              v-if=\"row[column.prop].length > 0\"\n              :src=\"row[column.prop][0]\"\n            />\n            <el-image\n              slot=\"reference\"\n              v-if=\"row[column.prop].length > 0\"\n              :src=\"row[column.prop][0]\"\n              :preview-src-list=\"row[column.prop]\"\n            />\n          </el-popover>\n          <!-- 可编辑input，仅在text默认展示类型才可编辑-->\n          <el-input\n            v-focus\n            v-if=\"column.editRow == $index\"\n            v-model=\"row[column.prop]\"\n            @blur=\"editInputBlur(row, $index, column.prop, columIndex)\"\n          />\n          <!-- 操作按钮 -->\n          <template v-if=\"column.isOperation\">\n            <span v-for=\"(operations, index) in column.operation\" :key=\"index\">\n              <el-button\n                v-if=\"operations.isShow(row, $index)\"\n                :icon=\"operations.icon\"\n                :type=\"operations.type\"\n                @click=\"operations.buttonClick(row, $index)\"\n                :style=\"operations.style\"\n                :size=\"operations.size || 'mini'\"\n              >\n                {{ operations.label }}\n              </el-button>\n            </span>\n          </template>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!-- 分页 -->\n    <div\n      class=\"z-page-div\"\n      :style=\"{ textAlign: pageObj.position || 'center' }\"\n    >\n      <el-pagination\n        :small=\"pageObj.small\"\n        :background=\"pageObj.background\"\n        :page-size=\"pageObj.pageData.size\"\n        :total=\"pageObj.total\"\n        :page-count=\"pageObj.page\"\n        :pager-count=\"pageObj.page\"\n        :current-page=\"pageObj.pageData.page\"\n        :layout=\"pageObj.layout || layout\"\n        :page-sizes=\"pageObj.pageSizes || [10, 15, 20, 30, 50]\"\n        :popper-class=\"pageObj.popperClass\"\n        :prev-text=\"pageObj.prevText\"\n        :next-text=\"pageObj.nextText\"\n        :disabled=\"pageObj.disabled\"\n        :hide-on-single-page=\"pageObj.hideOnSinglePage\"\n        @size-change=\"sizeChange\"\n        @current-change=\"currentChange\"\n        @prev-click=\"prevClick\"\n        @next-click=\"nextClick\"\n      >\n      </el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'z-el-table',\n  directives: {\n    // 自定义指令,用于可编辑input自动获取焦点\n    focus: {\n      inserted: function (e) {\n        e.querySelector('input').focus()\n      },\n    },\n  },\n  props: {\n    tableData: {\n      type: Array,\n      required: true,\n    },\n\n    // tableObj是table所有配置，集成了element自身所有配置，以及新增了一些个性化配置\n    tableObj: {\n      type: Object,\n      default: () => {\n        return {}\n      },\n    },\n\n    // columnObj列配置选项，继承了element自身的所有配置，将选择框操作提出来在columnObj属性上，其他依然保留各自列\n    //columnObj.type(如果为\"\"空，就不会加载多选框，或者index编号),lazy(是否支持懒加载)\n    //columnData.columType(列类型,可选text(默认为普通文字模式),input(input可编辑框),switch(switch开关),image(图片),operation(操作按钮))\n    //prop(参数),label(列名),width(宽度),align(对齐方式),sortable(是否支持排序)\n    //如果为操作列,则需要填写需要的操作按钮,类型为Object。type(按钮样式,参考el—botton类型),label(按钮文字)icon(参考el-icon),color(字体颜色),buttonClick为点击后调用的方法名称\n    columnObj: {\n      type: Object,\n      required: true,\n    },\n\n    pageObj: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      headerCellStyle: {\n        background: '#f5f7fa',\n      },\n      layout: 'total, sizes, prev, pager, next, jumper',\n    }\n  },\n  methods: {\n    // 设置默认行样式\n    rowClassName({ row, rowIndex }) {\n      row.rowIndex = rowIndex\n      // if ((rowIndex + 3) % 3 == 0) {\n      //   return 'success-row'\n      // } else if ((rowIndex + 3) % 3 == 1) {\n      //   return 'warning-primary'\n      // } else if ((rowIndex + 3) % 3 == 2) {\n      //   return 'warning-row'\n      // }\n    },\n    // switchChange调用\n    switchChange(row, $index, prop) {\n      this.$emit('switchChange', row, $index, prop)\n    },\n    // 点击行\n    rowClick(row, column, event) {\n      this.$emit('rowClick', row, column, event)\n    },\n    // 可编辑input失去焦点\n    editInputBlur(row, $index, prop, columIndex) {\n      this.$emit('editInputBlur', row, $index, prop, columIndex)\n    },\n    // 条数变化,params每页条数\n    sizeChange(e) {\n      this.$emit('sizeChange', e)\n    },\n    // 页码变化,params当前页\n    currentChange(e) {\n      this.$emit('currentChange', e)\n    },\n    // 用户点击上一页按钮改变当前页后触发,params当前页\n    prevClick(e) {\n      this.$emit('prevClick', e)\n    },\n    // 用户点击下一页按钮改变当前页后触发\t,params当前页\n    nextClick(e) {\n      this.$emit('nextClick', e)\n    },\n  },\n}\n</script>\n<style lang=\"less\" scoped>\n// 列表div\n.z-table-div {\n  border: 1px #ebeef5 solid;\n  .el-table__body-wrapper {\n    height: calc(50% - 48px) !important; // 表格高度减去表头的高度\n  }\n\n  // 分页div\n  .z-page-div {\n    padding: 10px;\n    background-color: white;\n  }\n\n  // table按钮间距\n  .el-button {\n    margin: 0 6px;\n  }\n\n  // 斑马纹颜色\n  /deep/.el-table .warning-primary {\n    background: #ecf5ff;\n  }\n\n  // 斑马纹颜色\n  /deep/.el-table .warning-row {\n    background: #fdf6ec;\n  }\n\n  // 斑马纹颜色\n  /deep/.el-table .success-row {\n    background: #f0f9eb;\n  }\n\n  // table图片高度\n  /deep/.el-image__inner {\n    height: 50px;\n  }\n\n  // switch左边文字颜色\n  /deep/.el-switch__label--left {\n    color: #606266;\n  }\n\n  // 预览图片高度\n  img {\n    height: 400px;\n  }\n}\n</style>\n"],"mappings":"AAiMA;EACAA,IAAA;EACAC,UAAA;IACA;IACAC,KAAA;MACAC,QAAA,WAAAA,CAAAC,CAAA;QACAA,CAAA,CAAAC,aAAA,UAAAH,KAAA;MACA;IACA;EACA;EACAI,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;IAEA;IACAC,QAAA;MACAH,IAAA,EAAAI,MAAA;MACAC,OAAA,EAAAA,CAAA;QACA;MACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACAC,SAAA;MACAN,IAAA,EAAAI,MAAA;MACAF,QAAA;IACA;IAEAK,OAAA;MACAP,IAAA,EAAAI,MAAA;MACAF,QAAA;IACA;EACA;EACAM,KAAA;IACA;MACAC,eAAA;QACAC,UAAA;MACA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,aAAAC,IAAA;MAAA;QAAAC,GAAA;QAAAC;MAAA,IAAAF,IAAA;MACAC,GAAA,CAAAC,QAAA,GAAAA,QAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;;IACA;IACAC,aAAAF,GAAA,EAAAG,MAAA,EAAAC,IAAA;MACA,KAAAC,KAAA,iBAAAL,GAAA,EAAAG,MAAA,EAAAC,IAAA;IACA;IACA;IACAE,SAAAN,GAAA,EAAAO,MAAA,EAAAC,KAAA;MACA,KAAAH,KAAA,aAAAL,GAAA,EAAAO,MAAA,EAAAC,KAAA;IACA;IACA;IACAC,cAAAT,GAAA,EAAAG,MAAA,EAAAC,IAAA,EAAAM,UAAA;MACA,KAAAL,KAAA,kBAAAL,GAAA,EAAAG,MAAA,EAAAC,IAAA,EAAAM,UAAA;IACA;IACA;IACAC,WAAA9B,CAAA;MACA,KAAAwB,KAAA,eAAAxB,CAAA;IACA;IACA;IACA+B,cAAA/B,CAAA;MACA,KAAAwB,KAAA,kBAAAxB,CAAA;IACA;IACA;IACAgC,UAAAhC,CAAA;MACA,KAAAwB,KAAA,cAAAxB,CAAA;IACA;IACA;IACAiC,UAAAjC,CAAA;MACA,KAAAwB,KAAA,cAAAxB,CAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}