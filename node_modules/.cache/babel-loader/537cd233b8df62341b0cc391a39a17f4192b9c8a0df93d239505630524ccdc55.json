{"ast":null,"code":"export default {\n  name: 'App',\n  data() {\n    return {};\n  },\n  /**\n   * Executes before the instance is created. Intended for advanced initialization.\n   *\n   * @return {void} Nothing is returned from this function\n   */\n  beforeCreate() {\n    //在创建实例之前执行。用于高级初始化。\n  },\n  /**\n   * Initialize component properties and APIs, and render the view on page load.\n   *\n   * @return {void}\n   */\n  created() {\n    //初始化组件属性和api，并在页面加载时呈现视图。\n  },\n  /**\n   * Called before the component is mounted. This is the last time to modify\n   * the component before rendering. Generally, it is used to initialize\n   * third-party libraries and similar tasks. It is not recommended to modify\n   * the component's DOM structure at this point.\n   *\n   * @param {type} N/A - No parameters.\n   * @return {type} N/A - No return value.\n   */\n  beforeMount() {\n    //在组件安装前调用。这是最后一次修改渲染前的组件。通常，它用于初始化第三方库和类似任务。不建议修改此时组件的DOM结构。\n  },\n  /**\n   * Executes when the page is mounted and ready to be inserted into the DOM.\n   * This is a lifecycle method that is called during its corresponding lifecycle.\n   * For example: it can be used for data initialization.\n   *\n   * @param {type} N/A - no parameters.\n   * @return {type} N/A - no return value.\n   */\n  mounted() {\n    //当页面被挂载并准备插入DOM时执行。这是一个生命周期方法，在其相应的生命周期中被调用。例如:可用于数据初始化。\n    this.requestList();\n  },\n  /**\n   * Updates the component with new data before rendering.\n   *\n   * This function is called before the component is re-rendered with updated data.\n   *\n   * @return {void}\n   */\n  beforeUpdate() {\n    //在渲染前用新数据更新组件。此函数在用更新后的数据重新渲染组件之前调用。\n  },\n  /**\n   * Executes when the component is updated.\n   *\n   * @param None\n   * @return None\n   */\n  updated() {\n    //在组件更新时执行。\n  },\n  /**\n   * Executes before the component is destroyed.\n   *\n   * @param none\n   * @return none\n   */\n  beforeDestroy() {\n    //在组件被销毁之前执行。\n  },\n  /**\n   * Called after the component is destroyed.\n   *\n   * @param None\n   * @return None\n   */\n  destroyed() {\n    //在组件销毁后调用。\n  },\n  computed: {\n    //计算属性，在HTML DOM加载后立即执行。例如，当分配数据时，计算属性立即执行。计算属性是自动的。\n    //tableData(){return []}\n  },\n  watch: {\n    //绑定到Vue实例的监视程序。它必须具有触发条件才能执行，例如属性更改。\n    //tableData(newVal, oldVal) {},\n  },\n  methods: {\n    //方法是Vue实例对象上绑定的方法。methods必须要有一定的触发条件才能执行。例如按钮点击。接口请求。\n    requestList() {}\n  }\n};","map":{"version":3,"names":["name","data","beforeCreate","created","beforeMount","mounted","requestList","beforeUpdate","updated","beforeDestroy","destroyed","computed","watch","methods"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- 路由出口 -->\n    <!-- 路由匹配到的组件将渲染在这里 -->\n    <router-view></router-view>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {}\n  },\n  /**\n   * Executes before the instance is created. Intended for advanced initialization.\n   *\n   * @return {void} Nothing is returned from this function\n   */\n  beforeCreate() {\n    //在创建实例之前执行。用于高级初始化。\n  },\n  /**\n   * Initialize component properties and APIs, and render the view on page load.\n   *\n   * @return {void}\n   */\n  created() {\n    //初始化组件属性和api，并在页面加载时呈现视图。\n  },\n  /**\n   * Called before the component is mounted. This is the last time to modify\n   * the component before rendering. Generally, it is used to initialize\n   * third-party libraries and similar tasks. It is not recommended to modify\n   * the component's DOM structure at this point.\n   *\n   * @param {type} N/A - No parameters.\n   * @return {type} N/A - No return value.\n   */\n  beforeMount() {\n    //在组件安装前调用。这是最后一次修改渲染前的组件。通常，它用于初始化第三方库和类似任务。不建议修改此时组件的DOM结构。\n  },\n  /**\n   * Executes when the page is mounted and ready to be inserted into the DOM.\n   * This is a lifecycle method that is called during its corresponding lifecycle.\n   * For example: it can be used for data initialization.\n   *\n   * @param {type} N/A - no parameters.\n   * @return {type} N/A - no return value.\n   */\n  mounted() {\n    //当页面被挂载并准备插入DOM时执行。这是一个生命周期方法，在其相应的生命周期中被调用。例如:可用于数据初始化。\n    this.requestList()\n  },\n  /**\n   * Updates the component with new data before rendering.\n   *\n   * This function is called before the component is re-rendered with updated data.\n   *\n   * @return {void}\n   */\n  beforeUpdate() {\n    //在渲染前用新数据更新组件。此函数在用更新后的数据重新渲染组件之前调用。\n  },\n  /**\n   * Executes when the component is updated.\n   *\n   * @param None\n   * @return None\n   */\n  updated() {\n    //在组件更新时执行。\n  },\n  /**\n   * Executes before the component is destroyed.\n   *\n   * @param none\n   * @return none\n   */\n  beforeDestroy() {\n    //在组件被销毁之前执行。\n  },\n  /**\n   * Called after the component is destroyed.\n   *\n   * @param None\n   * @return None\n   */\n  destroyed() {\n    //在组件销毁后调用。\n  },\n  computed: {\n    //计算属性，在HTML DOM加载后立即执行。例如，当分配数据时，计算属性立即执行。计算属性是自动的。\n    //tableData(){return []}\n  },\n  watch: {\n    //绑定到Vue实例的监视程序。它必须具有触发条件才能执行，例如属性更改。\n    //tableData(newVal, oldVal) {},\n  },\n  methods: {\n    //方法是Vue实例对象上绑定的方法。methods必须要有一定的触发条件才能执行。例如按钮点击。接口请求。\n    requestList() {\n    },\n  },\n}\n</script>\n\n<style lang=\"less\">\nhtml,\nbody,\nh3,\np {\n  margin: 0;\n  padding: 0;\n}\n</style>\n"],"mappings":"AASA;EACAA,IAAA;EACAC,KAAA;IACA;EACA;EACA;AACA;AACA;AACA;AACA;EACAC,aAAA;IACA;EAAA,CACA;EACA;AACA;AACA;AACA;AACA;EACAC,QAAA;IACA;EAAA,CACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAC,YAAA;IACA;EAAA,CACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAC,QAAA;IACA;IACA,KAAAC,WAAA;EACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAC,aAAA;IACA;EAAA,CACA;EACA;AACA;AACA;AACA;AACA;AACA;EACAC,QAAA;IACA;EAAA,CACA;EACA;AACA;AACA;AACA;AACA;AACA;EACAC,cAAA;IACA;EAAA,CACA;EACA;AACA;AACA;AACA;AACA;AACA;EACAC,UAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA;IACA;EAAA,CACA;EACAC,KAAA;IACA;IACA;EAAA,CACA;EACAC,OAAA;IACA;IACAP,YAAA,GACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}